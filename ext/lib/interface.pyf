! MolModExt implements a few number crunching routines for the molmod package in C.
! Copyright (C) 2007 - 2008 Toon Verstraelen <Toon.Verstraelen@UGent.be>
!
! This file is part of MolModExt.
!
! MolModExt is free software; you can redistribute it and/or
! modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation; either version 3
! of the License, or (at your option) any later version.
!
! MolModExt is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program; if not, see <http://www.gnu.org/licenses/>
!
! --


python module ext
interface

!!
!!  ff.c
!!

  double precision function ff_dm_quad(n,numbers,cor,dm0,R0,amp,gradient)
    intent(c) ff_dm_quad
    intent(c)
    integer intent(hide), depend(cor) :: n=len(cor)
    integer intent(in) :: numbers(n)
    double precision intent(in) :: cor(n,3)
    integer intent(in) :: dm0(n,n)
    double precision intent(in) :: R0
    double precision intent(in) :: amp
    double precision intent(inout) :: gradient(n,3)
  end function ff_dm_quad

  double precision function ff_dm_reci(n,numbers,cor,dm0,amp,gradient)
    intent(c) ff_dm_reci
    intent(c)
    integer intent(hide), depend(cor) :: n=len(cor)
    integer intent(in) :: numbers(n)
    double precision intent(in) :: cor(n,3)
    integer intent(in) :: dm0(n,n)
    double precision intent(in) :: amp
    double precision intent(inout) :: gradient(n,3)
  end function ff_dm_reci

  double precision function ff_bond_quad(m,n,cor,pairs,lengths,amp,gradient)
    intent(c) ff_bond_quad
    intent(c)
    integer intent(hide), depend(pairs) :: m=len(pairs)
    integer intent(hide), depend(cor) :: n=len(cor)
    double precision intent(in) :: cor(n,3)
    integer intent(in) :: pairs(m,2)
    double precision intent(in) :: lengths(m)
    double precision intent(in) :: amp
    double precision intent(inout) :: gradient(n,3)
  end function ff_bond_quad

  double precision function ff_bond_hyper(m,n,cor,pairs,lengths,scale,amp,gradient)
    intent(c) ff_bond_hyper
    intent(c)
    integer intent(hide), depend(pairs) :: m=len(pairs)
    integer intent(hide), depend(cor) :: n=len(cor)
    double precision intent(in) :: cor(n,3)
    integer intent(in) :: pairs(m,2)
    double precision intent(in) :: lengths(m)
    double precision intent(in) :: scale
    double precision intent(in) :: amp
    double precision intent(inout) :: gradient(n,3)
  end function ff_bond_hyper

!!
!! graphs.c
!!

  subroutine graphs_floyd_warshall(n,dm)
    intent(c) graphs_floyd_warshall
    intent(c)
    integer intent(hide), depend(dm) :: n=len(dm)
    integer intent(inout) :: dm(n,n)
  end subroutine graphs_floyd_warshall

end interface
end python module ext


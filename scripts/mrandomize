#!/usr/bin/env python
# MolMod is a collection of molecular modelling tools for python.
# Copyright (C) 2005 Toon Verstraelen
# 
# This file is part of MolMod.
# 
# MolMod is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# 
# --



import os, sys, copy, random, math, numpy.random, getopt

from molmod.molecules import molecule_xyz_from_filename
from molmod.molecular_graphs2 import MolecularGraph
from molmod.units import from_angstrom, to_angstrom
from molmod.data import periodic
from molmod.transformations import Rotation



def half_molecule(graph, atom1, atom2):
    atom1_new = set(graph.neighbors[atom1])
    atom1_new.discard(atom2)
    atom1_part = set([atom1])
    
    while len(atom1_new) > 0:
        pivot = atom1_new.pop()
        if pivot == atom2: return
        pivot_neighbors = set(graph.neighbors[pivot])
        pivot_neighbors -= atom1_part
        pivot_neighbors.discard(atom1)
        atom1_new |= pivot_neighbors
        atom1_part.add(pivot)
    
    return atom1_part


def rotational_randomize(molecule, mgraph):
    for (atom1, atom2), order in mgraph.bond_orders.iteritems():
        #print (atom1, atom2), order
        if order != 1: continue
        if len(mgraph.neighbors[atom1]) < 2: continue
        if len(mgraph.neighbors[atom2]) < 2: continue
        atom1_part = half_molecule(mgraph, atom1, atom2)
        if atom1_part is None: continue
        
        axis = molecule.coordinates[atom1] - molecule.coordinates[atom2]
        center = molecule.coordinates[atom1]
        angle = random.random()*math.pi*2
        
        transf = Rotation(angle, axis, center)
        
        for index in atom1_part:
            molecule.coordinates[index] = transf.apply(molecule.coordinates[index])


def displacement_randomize(molecule, max_displacement):
    for index in xrange(len(molecule.numbers)):
        molecule.coordinates[index] += (numpy.random.beta(2, 2, 3)*2-1)*max_displacement
        

def coarse_energy(molecule, mgraph):
    energy = 0.0
    radii = numpy.array([periodic[number].radius for number in molecule.numbers], float)
    #print "begin energy"
    for index1 in xrange(len(molecule.numbers)):
        for index2 in xrange(index1+1, len(molecule.numbers)):
            delta = molecule.coordinates[index1] - molecule.coordinates[index2]
            distance = math.sqrt(numpy.dot(delta, delta))
            #print "%2i %2i: %5.3f, %5.3e" % (
            #    molecule.numbers[index1], 
            #    molecule.numbers[index2], 
            #    to_angstrom(math.sqrt(distance2)),
            #    (distance2/(radii[index1]+radii[index2])**2)**(-6)
            #)
            length = mgraph.bond_lengths.get(frozenset([index1, index2]))
            if length == None:
                radius = radii[index1]+radii[index2]
                energy += (distance/radius)**(-12)
            else:
                energy += 0.005*(1-math.exp(-(distance-length)/(4*length)))**2
    print "total energy %5.3e" % energy
    return energy
        
help_message = """Usage: mrandomize filename number [maxdisp]
Randomize molecular geometries, avoiding unphysical configurations.

Options:
    filename     The filename of the input xyz file that contains a molecular
                 geometry. It is sugested to use only geometries of single
                 optimized molecules.
    number       The number of randomized geometries.
    maxdisp      The average displacemnt in angstrom, used by the displacement
                 randomizer. The default value is 0.05 Angstrom.
    
Details:
    For each randomized molecule, these steps are taken:
       - The program starts with the input geometry.
       - First random internal rotations are performed around all bonds that are
         not part of a cyclic substructure
       - Secondly all the atoms are randomly displaced with an given avarege
         displacement.
       - Finally a rough estimate of the Pauli repulsion is calculated. If this
         value is too high, the random geometry is rejected."""

if __name__ == "__main__":
    try:
        opts, filenames = getopt.getopt(sys.argv[1:], "n:r:h?")
    except GetoptError, e:
        print e.msg
        print help_message
        sys.exit(2)

    number = 1
    max_displacement = from_angstrom(0.05)
    for opt, arg in opts:
        if opt=="-n":
            number = int(arg)
        elif opt=="-r":
            max_displacement = from_angstrom(float(sys.argv[3]))
        elif opt=="-h" or opt=="-?":
            print help_message
            sys.exit(1)
        else:
            print help_message
            sys.exit(2)
    

    max_number_len = len(str(number-1))
    for filename in filenames:
        basename = os.path.basename(filename[:filename.rfind(".")])
        output_filename_template = basename + "%0" + str(max_number_len) + "i.xyz"

        input_molecule =  molecule_xyz_from_filename(filename)
        mgraph = MolecularGraph(input_molecule)
        
        for index in xrange(number):
            accepted = False
            while not accepted:
                randomized_molecule = copy.deepcopy(input_molecule)
                rotational_randomize(randomized_molecule, mgraph)
                displacement_randomize(randomized_molecule, max_displacement)
                accepted = coarse_energy(randomized_molecule, mgraph) < 1e-5
            output_filename = output_filename_template % index
            randomized_molecule.write_xyz_to_filename(output_filename)
            print "Written to %s." % output_filename
        
